{"name": "test_valid_user_login", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.Error: Page.goto: net::ERR_CONNECTION_REFUSED at http://localhost/opencart/upload/\nCall log:\n  - navigating to \"http://localhost/opencart/upload/\", waiting until \"load\"", "trace": "request = <SubRequest 'page' for <Function test_valid_user_login>>\nbrowser_context = <BrowserContext browser=<Browser type=<BrowserType name=chromium executable_path=C:\\Users\\pavan\\AppData\\Local\\ms-playwright\\chromium-1187\\chrome-win\\chrome.exe> version=140.0.7339.16>>\n\n    @pytest.fixture(scope=\"function\")\n    def page(request, browser_context):\n        \"\"\"\n        Creates a new browser page for each test.\n        - Navigates to the base URL\n        - Starts tracing (if enabled)\n        - Captures screenshots, traces, and videos for failed tests\n        - Attaches all artifacts to Allure report\n        \"\"\"\n        # Read test configuration\n        base_url = get_config_value(request.config, \"base_url\")\n        screenshot_option = get_config_value(request.config, \"screenshot\")\n        tracing_option = get_config_value(request.config, \"tracing\")\n        video_option = get_config_value(request.config, \"video\")\n    \n        print(f\"🌐 Navigating to: {base_url}\")\n    \n        # Start tracing if enabled\n        if tracing_option in [\"on\", \"retain-on-failure\"]:\n            print(\"📹 Tracing enabled - capturing screenshots and actions\")\n            browser_context.tracing.start(screenshots=True, snapshots=True, sources=True)\n    \n        # Create and navigate to base URL\n        page = browser_context.new_page()\n>       page.goto(base_url)\n\nconftest.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:9019: in goto\n    self._sync(\n.venv\\Lib\\site-packages\\playwright\\_impl\\_page.py:556: in goto\n    return await self._main_frame.goto(**locals_to_params(locals()))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\playwright\\_impl\\_frame.py:153: in goto\n    await self._channel.send(\n.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:69: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Connection object at 0x00000265C2E33D90>, cb = <function Channel.send.<locals>.<lambda> at 0x00000265C2E6A160>\nis_internal = False, title = None\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(\n            task, \"__pw_stack__\", None\n        ) or inspect.stack(0)\n    \n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.Error: Page.goto: net::ERR_CONNECTION_REFUSED at http://localhost/opencart/upload/\nE           Call log:\nE             - navigating to \"http://localhost/opencart/upload/\", waiting until \"load\"\n\n.venv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:558: Error"}, "attachments": [{"name": "stdout", "source": "b2f6c5ff-e5ce-4aab-89a4-dfc517dd2e88-attachment.txt", "type": "text/plain"}], "start": 1761621437888, "stop": 1761621437888, "uuid": "c77467d9-8533-422f-9b24-d46d45049bc0", "historyId": "bc0571d77419ce711f50b52b2cc44204", "testCaseId": "bc0571d77419ce711f50b52b2cc44204", "fullName": "tests.test_login#test_valid_user_login", "labels": [{"name": "tag", "value": "sanity"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "Pavan-Lenova"}, {"name": "thread", "value": "23188-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}], "titlePath": ["tests", "test_login.py"]}